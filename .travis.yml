# Copyright Louis Dionne 2017
# Distributed under the Boost Software License, Version 1.0.
# (See accompanying file LICENSE.md or copy at http://boost.org/LICENSE_1_0.txt)

language: cpp
os: linux # Use Linux unless specified otherwise
dist: xenial # Use 'xenial' unless specified otherwise
sudo: false

# Do not build branches of the form "pr/*". By prefixing pull requests coming
# from branches inside the repository with pr/, this avoids building both the
# branch push _and_ the pull request.
branches:
  except: /pr\/.*/

matrix:
  include:
    - env: COMPILER=clang++-8
      addons: { apt: { packages: ["clang-8"], sources: ["llvm-toolchain-xenial-8", "ubuntu-toolchain-r-test"] } }

    - env: COMPILER=g++-8
      addons: { apt: { packages: ["g++-8"], sources: ["ubuntu-toolchain-r-test"] } }

    - os: osx
      env: COMPILER=clang++
      osx_image: xcode11

    # Build using C++17
    - env: COMPILER=clang++-8 CXX_STD=17
      addons: { apt: { packages: ["clang-8"], sources: ["llvm-toolchain-xenial-8", "ubuntu-toolchain-r-test"] } }

    # Build without the optional dependencies
    - env: COMPILER=clang++-8 NO_OPTIONAL_DEPENDENCIES=true
      addons: { apt: { packages: ["clang-8"], sources: ["llvm-toolchain-xenial-8", "ubuntu-toolchain-r-test"] } }

  allow_failures:
    - env: COMPILER=g++-8

install:
  # Set the ${CXX} and ${CC} variables properly. They are picked up by CMake
  # to determine the C++ and C compilers, respectively.
  - export CXX=${COMPILER}
  - if [[ "${CXX}" == "g++"* ]]; then export CC="${CXX/++/cc}"; fi
  - if [[ "${CXX}" == "clang++"* ]]; then export CC="${CXX/++/}"; fi
  - echo "CXX = ${CXX}" && ${CXX} --version
  - echo "CC = ${CC}" && ${CC} --version

  # Set the default C++ Standard for testing
  - if [[ "${CXX_STD}" == "" ]]; then CXX_STD="20"; fi

  # Dependencies required by the CI are installed in ${TRAVIS_BUILD_DIR}/deps/
  - DEPS_DIR="${TRAVIS_BUILD_DIR}/deps"
  - mkdir -p ${DEPS_DIR} && cd ${DEPS_DIR}

  # Install a recent CMake
  - CMAKE_VERSION=3.17.0
  - CMAKE_DIR=${DEPS_DIR}/cmake-${CMAKE_VERSION}
  - |
    if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
      CMAKE_URL="https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION}/cmake-${CMAKE_VERSION}-Linux-x86_64.tar.gz"
      mkdir -p ${CMAKE_DIR}
      (travis_retry wget --no-check-certificate -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C ${CMAKE_DIR}) || exit 1
      export PATH=${CMAKE_DIR}/bin:${PATH}
    else
      brew install cmake || brew upgrade cmake
    fi
  - cmake --version

  # Install Boost headers
  - BOOST_VERSION=1.75.0
  - BOOST_DIR=${DEPS_DIR}/boost-${BOOST_VERSION}
  - |
    if [[ "${NO_OPTIONAL_DEPENDENCIES}" != "true" ]]; then
      BOOST_URL="https://boostorg.jfrog.io/artifactory/main/release/${BOOST_VERSION}/source/boost_${BOOST_VERSION//\./_}.tar.gz"
      mkdir -p ${BOOST_DIR}
      { travis_retry wget -O - ${BOOST_URL} | tar --strip-components=1 -xz -C ${BOOST_DIR}; } || exit 1
    fi

  # Install other dependencies
  - |
    if [[ "${NO_OPTIONAL_DEPENDENCIES}" == "true" ]]; then
      (cd "${TRAVIS_BUILD_DIR}/dependencies" && ./install.sh --minimal)
    else
      (cd "${TRAVIS_BUILD_DIR}/dependencies" && ./install.sh)
    fi

before_script:
  - cd "${TRAVIS_BUILD_DIR}"
  - mkdir build
  - |
    cmake -S . -B build \
      -DBOOST_ROOT="${BOOST_DIR}" \
      -DCMAKE_PREFIX_PATH="${TRAVIS_BUILD_DIR}/dependencies/install" \
      -DCMAKE_INSTALL_PREFIX="${TRAVIS_BUILD_DIR}/build/install" \
      -DCMAKE_CXX_STANDARD=${CXX_STD} \
      -DCMAKE_CXX_STANDARD_REQUIRED=ON

script:
  - cmake --build build --target check
  - |
    if [[ "${NO_OPTIONAL_DEPENDENCIES}" != "true" ]]; then
      cmake --build build --target benchmarks
    fi
